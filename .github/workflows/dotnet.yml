name: .NET build and test
env:
  CURRENT_VERSION: 2.0.${{ github.run_number }}
  LAST_COMMIT_MESSAGE: ${{ github.event.head_commit.message }}

on:
  push:
    paths-ignore:
      - '*.md'
  pull_request:
    paths-ignore:
      - '*.md'

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - uses: actions/checkout@v4
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: |
            8.0.x
            9.0.x
      - name: Print OS name
        shell: bash
        run: |
          echo "$RUNNER_OS"
      - name: Show filesystem on windows
        if: runner.os == 'Windows'
        run: Get-Volume
      - name: Setup and show filesystem on ubuntu
        if: runner.os == 'Linux'
        run: |
            sudo add-apt-repository ppa:dotnet/backports
            sudo apt update
            sudo apt install -y exfatprogs exfat-fuse
            dd if=/dev/zero of=~/exfat_test_drive.img bs=1M count=100
            mkfs.exfat ~/exfat_test_drive.img
            mkdir -p ~/exfat_test_mount
            # that will fail on ubuntu/wsl
            # sudo mount -t exfat -o loop ~/exfat_test_drive.img ~/exfat_test_mount
            sudo mount -t exfat-fuse -o loop ~/exfat_test_drive.img ~/exfat_test_mount
            df -h
      - name: Show filesystem on macos
        if: runner.os == 'MacOs'
        run: df -h
      - name: Check formatting
        run: dotnet format --verify-no-changes
      - name: Restore dependencies
        run: dotnet restore
      - name: Build
        run: dotnet build --configuration Release --no-restore
      - name: Test
        run: dotnet test --no-build --verbosity normal --configuration Release

  deployRelease:
    if: startsWith(github.ref, 'refs/heads/release')
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: |
            8.0.x
            9.0.x
      - name: Restore dependencies
        run: dotnet restore
      - name: Build
        run: dotnet build --configuration Release --no-restore
      - name: NugetPush
        env:
          NUGET_TOKEN_EXISTS: ${{ secrets.NUGET_TOKEN }}
        if: env.NUGET_TOKEN_EXISTS != ''
        run: |
          dotnet nuget push ./SanitizeFilename/bin/Release/*.nupkg --skip-duplicate --api-key ${{secrets.NUGET_TOKEN}} --source https://api.nuget.org/v3/index.json
      - name: Github release
        shell: bash
        env:
          GITHUB_TOKEN: ${{ github.TOKEN }}
        if: env.GITHUB_TOKEN != ''
        run: |
          gh release create ${{env.CURRENT_VERSION}} ./SanitizeFilename/bin/Release/*.*nupkg --generate-notes

  deployTest:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: |
            8.0.x
            9.0.x
      - name: Restore dependencies
        run: dotnet restore
      - name: Build
        run: dotnet build --configuration Release --no-restore
      - name: NugetPush
        env:
          NUGET_TOKEN_EXISTS: ${{ secrets.NUGET_TEST_TOKEN }}
        if: env.NUGET_TOKEN_EXISTS != ''
        run: |
          ls ./SanitizeFilename/bin/Release
          dotnet nuget push ./SanitizeFilename/bin/Release/*.nupkg --skip-duplicate --api-key ${{secrets.NUGET_TEST_TOKEN}} --source https://apiint.nugettest.org/v3/index.json
